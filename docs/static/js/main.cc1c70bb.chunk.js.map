{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","buscar","encodeURI","url","fetch","response","json","data","gifs","map","item","id","title","images","downsized_medium","console","warn","GifItem","url2","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","key","GifApp","categories","c","ReactDOM","render","document","getElementById"],"mappings":"mLAKaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAiBhD,OACI,0BAAMC,SAdW,SAAEC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,OAUd,6CAAoBD,GAEpB,2BACIQ,KAAK,OACLC,MAAQT,EACRU,SAXc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,Y,uBClBnBG,EAAO,uCAAG,WAAQC,GAAR,yBAAAC,EAAA,4DACL,mCACRC,EAASC,UAAUH,GACnBI,EAHa,uDACL,mCADK,uBAG6DF,GAH7D,SAKIG,MAAOD,GALX,cAKbE,EALa,gBAMIA,EAASC,OANb,uBAMXC,EANW,EAMXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAKC,GACTC,MAAOF,EAAKE,MACZT,IAAG,UAAEO,EAAKG,cAAP,aAAE,EAAaC,qBAG1BC,QAAQC,KAAMR,GAdK,kBAeZA,GAfY,4CAAH,sDCEPS,EAAU,SAAC,GAAuB,IAAnBL,EAAkB,EAAlBA,MAElBM,EAFoC,EAAXf,IAEdA,IAEjB,OACI,yBAAKgB,UAAU,8CACX,yBAAKC,IAAKF,EAAMG,IAAMT,IACtB,2BAAKA,EAAL,OCLG,SAASU,EAAT,GAAkC,IAAdvB,EAAa,EAAbA,SAAa,ECApB,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BsB,KAAM,GACNgB,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAoBxC,OAZAC,qBAAW,WACP5B,EAASC,GACJ4B,MAAM,SAAAC,GAECH,EAAS,CACLlB,KAAMqB,EACNL,SAAS,SAI1B,CAAExB,IAEEyB,EDjBmBK,CAAc9B,GAAhCQ,EAHoC,EAGpCA,KAAMgB,EAH8B,EAG9BA,QAEd,OACI,oCACI,gCAAOxB,EAAP,KAEEwB,GAAW,0CAEb,yBAAKJ,UAAU,aAEPZ,EAAKE,KAAK,SAAAqB,GAAG,OACT,kBAAC,EAAD,iBACSA,EADT,CAEIC,IAAMD,EAAInB,WEf/B,IAmCQqB,EAnCO,WAElB,IAFwB,EAGY/C,mBADhB,CAAC,YAFG,mBAGjBgD,EAHiB,KAGLjD,EAHK,KAUxB,OACI,oCACI,yCACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAMA,4BAEQiD,EAAWxB,KAAK,SAAAyB,GAAC,OACb,kBAACZ,EAAD,CACIvB,SAAWmC,EACXH,IAAMG,UCzBlCC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.cc1c70bb.chunk.js","sourcesContent":["\nimport React, { useState } from 'react';\n\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2 ){\n            setCategories( cats => [ inputValue, ...cats ] )\n            setInputValue('')\n        }\n        \n    }\n    const handleInputChange = ( e ) => {\n        setInputValue( e.target.value )\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <h2>Add CAtegory: { inputValue }</h2>\n\n            <input \n                type=\"text\" \n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n\n","\nexport const getGifs = async ( category ) => {\n    const token = '4aDVFI71dpINvwVAflnqt60jnzypbDwG';\n    const buscar = encodeURI(category);\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${token}&limit=10&q=${buscar}`\n\n    const response = await fetch( url );\n    const { data } = await response.json();\n    const gifs = data.map( item => {\n        return {\n            id: item.id,\n            title: item.title,\n            url: item.images?.downsized_medium\n        }\n    })\n    console.warn( gifs )\n    return gifs \n}","\nimport React from 'react';\n\nexport const GifItem = ( {  title, url } ) => {\n\n    const url2 = url.url;\n\n    return (\n        <div className=\"card animate__animated animate__fadeInDown\" >\n            <img src={url2} alt={ title } />\n            <p>{ title } </p>\n        </div>\n    )\n}","\nimport React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifItem } from './GifItem';\n\nexport default function GifGrid( { category } ) {\n\n    //LLamado al CUSTOM HOOK\n    const { data, loading } = useFetchGifs( category );\n\n    return (\n        <>\n            <h3> { category } </h3>\n\n            { loading && <p>Cargando...</p> }\n\n            <div className=\"card-grid\">\n                {\n                    data.map( img => (\n                        <GifItem \n                            { ...img } \n                            key={ img.id }\n                            />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","\nimport { useState, useEffect } from 'react'\n\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    // No puede ser ASYNC\n    useEffect( () => {\n        getGifs( category )\n            .then( imgs => {\n                //setTimeout( () => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n                //}, 3000)\n            })\n    }, [ category ] );\n\n    return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\n\n\nexport const GifApp = () => {\n\n    const categories_ = ['Digimon' ];\n    const [categories, setCategories] = useState( categories_);\n/*\n    const handleAdd = () => {\n        //setCategories( [ ...categories, 'x-men' ] )\n        setCategories( cats => [ ...cats, 'X-men' ] )\n    }*/\n\n    return (\n        <>\n            <h2> Gif App </h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n            {/*}\n            <button type=\"button\" onClick={ handleAdd } >\n                + Agregar\n            </button>\n            */}\n            <ol>\n                { \n                    categories.map( c => (\n                        <GifGrid \n                            category={ c } \n                            key={ c }\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n\n}\n\nexport default GifApp;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifApp from './GifApp';\n\nReactDOM.render(\n  /*<React.StrictMode>*/\n    <GifApp />\n  /*</React.StrictMode>*/,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}